name: Redis Implementation Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: windows-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: üì¶ Setup Redis CLI
      run: |
        Write-Host "Installing Redis via Chocolatey..."
        choco install redis-64 -y
        
        # Wait for installation to complete
        Start-Sleep -Seconds 5
        
        # List chocolatey lib directory
        Write-Host "Checking Chocolatey lib directory..."
        Get-ChildItem "C:\ProgramData\chocolatey\lib" -Directory | Where-Object { $_.Name -like "*redis*" } | ForEach-Object {
          Write-Host "Found Redis package: $($_.FullName)"
          Get-ChildItem $_.FullName -Recurse -Filter "*.exe" | ForEach-Object {
            Write-Host "  Executable: $($_.FullName)"
          }
        }
        
        # Find redis-cli.exe in common locations
        $possiblePaths = @(
          "C:\ProgramData\chocolatey\lib\redis-64\tools",
          "C:\ProgramData\chocolatey\bin",
          "C:\Program Files\Redis",
          "C:\tools\redis"
        )
        
        $redisPath = $null
        foreach ($path in $possiblePaths) {
          Write-Host "Checking: $path"
          if (Test-Path "$path\redis-cli.exe") {
            $redisPath = $path
            Write-Host "Found Redis at: $redisPath"
            break
          }
        }
        
        if (-not $redisPath) {
          Write-Host "Searching in ProgramData\chocolatey..."
          $found = Get-ChildItem -Path "C:\ProgramData\chocolatey" -Recurse -Filter "redis-cli.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($found) {
            $redisPath = $found.Directory.FullName
            Write-Host "Found Redis at: $redisPath"
          } else {
            Write-Error "redis-cli.exe not found!"
            exit 1
          }
        }
        
        # Add to PATH
        echo "$redisPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        $env:PATH = "$redisPath;$env:PATH"
        
        # Verify installation
        & "$redisPath\redis-cli.exe" --version
      shell: pwsh
      
    - name: üî® Restore dependencies
      run: dotnet restore
      
    - name: üèóÔ∏è Build project
      run: dotnet build --configuration Release --no-restore
      
    - name: üß™ Run tests
      run: |
        # Ensure redis-cli is in PATH for this step
        $possiblePaths = @(
          "C:\Program Files\Redis",
          "C:\ProgramData\chocolatey\lib\redis-64\tools",
          "C:\tools\redis"
        )
        
        foreach ($path in $possiblePaths) {
          if (Test-Path "$path\redis-cli.exe") {
            $env:PATH = "$path;$env:PATH"
            Write-Host "Added Redis to PATH: $path"
            break
          }
        }
        
        Write-Host "Running test suite..."
        .\run-tests.ps1 -Verbose -ContinueOnFailure
      shell: pwsh
      
    - name: üìä Test Summary
      if: always()
      run: |
        Write-Host ""
        Write-Host "Test execution completed. Check logs above for details."
      shell: pwsh

  test-linux:
    name: Run Tests (Linux)
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: üì¶ Setup Redis
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-tools redis-server
        redis-cli --version
        
    - name: üî® Restore dependencies
      run: dotnet restore
      
    - name: üèóÔ∏è Build project
      run: dotnet build --configuration Release --no-restore
      
    - name: üß™ Run basic connectivity test
      run: |
        echo "Starting Redis server..."
        dotnet run --configuration Release -- --port 6379 &
        SERVER_PID=$!
        
        sleep 2
        
        echo "Testing PING command..."
        redis-cli -p 6379 PING || echo "PING test failed"
        
        echo "Testing ECHO command..."
        redis-cli -p 6379 ECHO "Hello" || echo "ECHO test failed"
        
        echo "Stopping server..."
        kill $SERVER_PID || true
      shell: bash
